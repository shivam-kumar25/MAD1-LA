




############################################################
############################################################
############################################################
############################################################
############################################################
"""  """
############################################################
############################################################
############################################################
############################################################
############################################################
from flask import Flask

from flask import render_template 

from flask import redirect

from flask import request



############################################################
############################################################
############################################################
############################################################
############################################################
"""  """
############################################################
############################################################
############################################################
############################################################
############################################################
from flask_sqlalchemy import SQLAlchemy
 
 
 







 
 

###################################################################################################
###################################################################################################
"""  """
###################################################################################################
################################################################################################### 
app_ = Flask(__name__)



###################################################################################################
###################################################################################################
"""  """
###################################################################################################
###################################################################################################
app_.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///database.sqlite3"



###################################################################################################
###################################################################################################
"""  """
###################################################################################################
###################################################################################################
db_ = SQLAlchemy(app_)



"""
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
Models
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
"""
# each tabel in my database will refer to the classes here 
class student(db_.Model):
    student_id = db_.Column(db_.Integer(), primary_key = True , autoincrement = True )
    roll_number = db_.Column(db_.String(),unique = True, nullable = False ) ### defalut value of unique is False
    first_name = db_.Column(db_.String(), nullable = False )  ### default value of nullable is False
    last_name = db_.Column(db_.String() )

    # Relationship
    courses_ = db_.relationship("course" , backref = "student" , secondary = "enrollments")
    
    
class course(db_.Model):
    course_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    course_code = db_.Column(db_.String(), unique = True , nullable = False )
    course_name = db_.Column(db_.String() , nullable = False )
    course_description = db_.Column(db_.String )
    
    
class enrollments(db_.Model):
    enrollments_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    estudent_id = db_.Column(db_.Integer() , db_.ForeignKey('student.student_id') , nullable = False )
    ecourse_id = db_.Column(db_.Integer() , db_.ForeignKey('course.course_id' ) , nullable = False )
    
    # ✅ Create a relationship to the course table
    course = db_.relationship("course", backref="enrolments")




#######################################################
#######################################################
"""  """
#######################################################
#######################################################
with app_.app_context():
    db_.create_all()



















"""
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
CRUD Operations for Student
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""




###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Home Page Student """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""
Home Page for student
On the home page (URI = "/"), when we open it via the browser, dispaly an index page. The index page must display a tabel
with the list of students currently enrolled.
It should display an appropriate message if no student is enrolled. It should also have a button labled as "Add Student".    
"""

@app_.route("/" , methods = [ "GET" , "POST" ])
def home():
    
    ####################################################################
    ####################################################################
    """ all the records from students tabe """
    ####################################################################
    ####################################################################
    all_students_ = student.query.all() 
    
    return  render_template("home_page_.html" , all_students_ = all_students_)














###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Add Student """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""""
If the user clicks on the "Add Student", flask application should sent a GET request to the endpoint "/student/create",
which should dispaly an HTML form given in figue 2, the HTML form must be the same as given, its id must be "create-form".
"""

@app_.route("/student/create" , methods = [ "GET" , "POST" ])
def add_student():
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET" :
        return render_template("add_student_.html")
        
        
        
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        form_inputed_roll_num_ = request.form.get("roll")
        form_inputed_first_name_ = request.form.get("f_name")
        form_inputed_last_name_ = request.form.get("l_name")
        
        
        
        ##########################
        """ data validation """
        ##########################
        student_roll_exist = student.query.filter_by( roll_number = form_inputed_roll_num_ ).all()
        
        #
        if student_roll_exist != []:
            return render_template("student_already_exist_.html")
        
        
        else:
            new_student_ = student( roll_number = form_inputed_roll_num_ , first_name = form_inputed_first_name_ , last_name = form_inputed_last_name_ )
            
            db_.session.add(new_student_)
            db_.session.commit()
            
            
            
        return redirect("/")
            
            
    
    
   







###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Updating Student """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks the "Update" button, falsk application should send a GET request to an endpoint 
"/student/<int:student_id>/update" which shouls dispaly an HTML form, the HTML form should be the same as given, its id must be "update-form".
"""

@app_.route("/student/<int:student_id>/update" , methods = [ "GET" , "POST" ])
def update( student_id ):
    
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET":
        
        student_updating_ = student.query.filter_by(student_id = student_id ).first()
        
        current_roll = student_updating_.roll_number
        current_f_name = student_updating_.first_name 
        current_l_name = student_updating_.last_name
        
        
        ######
        current_student_enrolled_courses_ = enrollments.query.filter_by( estudent_id = student_id ).all()
        all_courses_ = course.query.all()
        enrolled_courses_id = []
        
        for course__ in current_student_enrolled_courses_:
            enrolled_courses_id .append(course__.ecourse_id)
            
        
        unenrolled_courses_list_ = []
        
        for courses_ in all_courses_:
            if courses_.course_id not in enrolled_courses_id:
                unenrolled_courses_list_.append(courses_)
                
            
            

        return render_template("update_student_.html" , student_id_ = student_id, current_roll = current_roll , current_f_name = current_f_name , current_l_name = current_l_name , avilable_courses_ = unenrolled_courses_list_  )
    
    
    
    
    
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        
        #
        student_updating_ = student.query.filter_by(student_id = student_id ).first()
        
        form_inputed_roll_num_for_update_ = request.form.get("roll")
        form_inputed_first_name_for_update_ = request.form.get("f_name")
        form_inputed_last_name_for_update_ = request.form.get("l_name")
        
        #
        form_inputed_course_id_for_enrollment_ = request.form.get("course")
        
        # 
        student_updating_.first_name = form_inputed_first_name_for_update_
        student_updating_.last_name = form_inputed_last_name_for_update_
        db_.session.commit()
        
        new_enrollment_ = enrollments( ecourse_id = form_inputed_course_id_for_enrollment_ , estudent_id = student_id )
        db_.session.add(new_enrollment_)
        db_.session.commit()
        
        return redirect("/")
        
        
        
        
        
        
        
    
    












###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Delete Student """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks "Delelte" button, falsk application should send a GET request to an endpoint 
"/student/<int:student_id>/delete", which should delete the student and all the corresponding enrollments from the database
redirect to the home page (URI = "/").
"""

@app_.route("/student/<int:student_id>/delete")
def delete( student_id ):
    
    
    student_in_focus = student.query.filter_by(student_id = student_id).all()
    
    student_in_focus_courses = enrollments.query.filter_by( estudent_id = student_id ).all()
    
    
    for courses_enrolled in student_in_focus_courses:
        db_.session.delete(courses_enrolled)
        db_.session.commit()
        
    db_.session.commit()
    
    for student_ in student_in_focus:
        db_.session.delete(student_)
        db_.session.commit()
        
        
        
    #
    return redirect("/")
    
    
    













###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Student Details """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks on the roll number of any row in the tabel in the home page of the flask applicaion, the application send a GET request to an endpoint "/student/<int:student_id>, which should show all the information (student details and enrollment details) in an HTML page. The HTML page should also have a button labled as "Go Back" to navigate back to the home page (URI = '/'). There must be 2 HTML tables in this page, one for showing the person details and the other for showing the enrollment details. 

The HTML for showing the personal details should be the same as given, its id must be "personal-details".
The HTML for displaying the enrollment details should be same as given, its id must be "entoll-tabel".
"""

@app_.route("/student/<int:student_id>")
def info(student_id):
    
    student_in_focus = student.query.filter_by(student_id = student_id).first()
    
    student_in_focus_courses = enrollments.query.filter_by( estudent_id = student_id ).all()
    
    
    
    # 
    return render_template("student_details_.html" , studet_courses_ = student_in_focus_courses , roll_ = student_in_focus.roll_number , f_name = student_in_focus.first_name , l_name = student_in_focus.last_name , student_id = student_id )












###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Withdraw """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""
Every record in the enrollments table should have a “withdraw” button, which when clicked, your flasapplication should send a GET request to an endpoint “/student/<int:student id>/withdraw/<int:course id>”,which should remove the course from current enrollments of the student from the database and redirectto the home page (URI = '/').
"""

@app_.route("/student/<int:student_id>/withdraw/<int:course_id>" , methods=['GET'])
def withdraw_enrollment_(student_id , course_id):
    
    enrollment_in_focus_ = enrollments.query.filter_by(estudent_id = student_id , ecourse_id = course_id).first()
    
    db_.session.delete(enrollment_in_focus_)
    db_.session.commit()
    
    
    return redirect('/')














"""
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
CRUD Operations for Courses
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""



###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Home Page Courses """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""
Home Page for Courses
When a user clicks on “Go to Courses”, the browser should send a GET request to your flask application’s “/courses” URI and the application should navigate the user to the courses page, which should display a table of all the courses currently available in the database.
"""


@app_.route("/courses" , methods = [ "GET" , "POST" ])
def home_course():
    
    ####################################################################
    ####################################################################
    """ all the records from Course tabe """
    ####################################################################
    ####################################################################
    all_courses_ = course.query.all() 
    
    return  render_template("course_home_.html" , all_courses_ = all_courses_)














###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Add Course """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""
"""

@app_.route("/course/create" , methods = [ "GET" , "POST" ])
def add_course():
    
    #######################################################
    #######################################################
    #######################################################
    """
    If the user clicks the “Add course” button, your flask application should send a GET request to an endpoint “/course/create”, which should display an HTML form. The HTML form should be the same as given. Its ID must be “create-course-form”.  
    """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET" :
        return render_template("add_course_.html")
        
        
        
    #######################################################
    #######################################################
    #######################################################
    """  
    If the user clicks the submit button, the browser should send a POST request to your flask application's “/course/create” URI. The flask application should then create a course object (with attributes course code, course name and course description) and add it into the database and, it should redirect to the courses page (URI = '/courses'). Note that the course code in each row of the table should be clickable.
    """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        form_inputed_course_code_ = request.form.get("code")
        form_inputed_course_name_ = request.form.get("c_name")
        form_inputed_course_description_ = request.form.get("desc")
        
        
        
        
        
        ##########################
        """ data validation """
        ##########################
        course_code_exist = course.query.filter_by( course_code = form_inputed_course_code_ ).all()
        
        #
        if course_code_exist != []:
            return render_template("student_already_exist_.html")
        
        
        else:
            new_course_ = course( course_code = form_inputed_course_code_ , course_name = form_inputed_course_name_ , course_description = form_inputed_course_description_ )
            
            db_.session.add(new_course_)
            db_.session.commit()
            
            
            
        return redirect("/courses")
            
            
    
    
   







###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Updating Courses """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" """

@app_.route("/course/<int:course_id>/update" , methods = [ "GET" , "POST" ])
def update_course( course_id ):
    
    
    #######################################################
    #######################################################
    #######################################################
    """ 
    If the user clicks the “Update” button on the courses page (URI = '/courses'), your flask application should send a GET request to an endpoint “/course/<int: course_id>/update”, which should display an HTML form. The HTML form should be the same as given below. Its ID must be “update-course-form”.
    """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET":
        
        course_updating_ = course.query.filter_by(course_id = course_id ).first()
        
        current_course_code = course_updating_.course_code
        current_course_name = course_updating_.course_name
        current_course_description = course_updating_.course_description
        
        
        return render_template("update_course_.html" , current_code = current_course_code , current_c_name  = current_course_name , current_desc  = current_course_description , course_id = course_id )
    
    
    
    
    
    
    #######################################################
    #######################################################
    #######################################################
    """ 
    If the user clicks the submit button, the browser should send a POST request to your flask application's “/course/<int:course id>/update” URI.
    The flask application should then update the targeted course (with the given course id in the URI) in the database and redirect to the courses page (URI = '/courses').
    """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        
        #
        course_updating_ = course.query.filter_by(course_id = course_id ).first()
        
        
        form_inputed_course_code_for_update_ = request.form.get("code")
        form_inputed_course_name_for_update_ = request.form.get("c_name")
        form_inputed_course_description_for_update_ = request.form.get("desc")
        
        
        # 
        course_updating_.update = form_inputed_course_code_for_update_
        course_updating_.course_name = form_inputed_course_name_for_update_
        course_updating_.course_description = form_inputed_course_description_for_update_
        
        

        db_.session.commit()
        
        
        return redirect("/courses")
        
        
        
        
        
        
        
    
    












###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Delete Course """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################


""" 
If the user clicks the “Delete” button on the courses page (URI = '/courses'), your flask application
should send a GET request to an endpoint “/course/<int:course_id>/delete”, which should delete the
course from the database and redirect to the home page (URI = '/').
"""

@app_.route("/course/<int:course_id>/delete")
def delete_course( course_id ):
    
    course_in_focus = course.query.filter_by(course_id = course_id).all()
    
    
    student_in_course_in_focus = enrollments.query.filter_by( ecourse_id = course_id ).all()
    
    
    for enrolled_ in student_in_course_in_focus:
        db_.session.delete(enrolled_)
        db_.session.commit()
        
    
    for course_ in course_in_focus:
        db_.session.delete(course_)
        db_.session.commit()
        
        
        
    #
    return redirect("/")
    
    
    













###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Course Details """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks on the course code of any row in the table in the courses page of the flask application (URI = '/courses'), the application should send a GET request to an endpoint “/course/<int:course_id>”, which should show all the information (course details and students enrolled in the course) in an HTML page. 

The HTML page should also have a button labelled “Go Back” to navigate back to the courses page (URI = '/courses'). There must be 2 HTML tables in this page, one for showing the course details and the other for displaying the enrollment details. The HTML for showing course details should be the same as given below. Its ID must be “course-detail”.
"""


@app_.route("/course/<int:course_id>")
def info_course(course_id):
    
    course_in_focus = course.query.filter_by(course_id = course_id ).first()
    student_in_course_in_focus = enrollments.query.filter_by( ecourse_id = course_id ).all()
    

    # 
    return render_template("course_details_.html" , student_in_selected_course_  = student_in_course_in_focus , c_code = course_in_focus.course_code , c_name = course_in_focus.course_name , c_desc = course_in_focus.course_description )











#########################################################
#########################################################
#########################################################
#########################################################
""" """
#########################################################
#########################################################
#########################################################
#########################################################
if __name__ == "__main__":
    app_.run(debug=True)