


########################################################################################################
"""
create a RESTful API, database models using Flask-RESTful and flask-SQLAlchemy.
"""
########################################################################################################





#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Imports """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
""" Flask """
#######################################################################################################################
from flask import Flask 

from flask import make_response 

from flask import jsonify

#######################################################################################################################
""" """
#######################################################################################################################
from flask_sqlalchemy import SQLAlchemy

#######################################################################################################################
"""  """
#######################################################################################################################
from flask_restful import Api

from flask_restful import fields

from flask_restful import marshal_with

from flask_restful import reqparse

from flask_restful import Resource


######################################################################################################################
"""   """
######################################################################################################################
from werkzeug.exceptions import HTTPException 












#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################


#######################################################################################################################
"""  """
#######################################################################################################################
app_ = Flask(__name__)


######################################################################################################################
"""  """
######################################################################################################################
app_.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///api_database.sqlite3'


######################################################################################################################
"""  """
######################################################################################################################
db_ = SQLAlchemy(app_)


######################################################################################################################
"""  """
######################################################################################################################
api_ = Api(app_)

 
 
 








#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Modals """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
class student(db_.Model):
    student_id = db_.Column(db_.Integer(), primary_key = True , autoincrement = True )
    roll_number = db_.Column(db_.String(),unique = True, nullable = False ) ### defalut value of unique is False
    first_name = db_.Column(db_.String(), nullable = False )  ### default value of nullable is False
    last_name = db_.Column(db_.String() )
    
    ##########################
    courses_ = db_.relationship("course" , backref = "student" , secondary = "enrollments")
    

class course(db_.Model):
    course_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    course_code = db_.Column(db_.String(), unique = True , nullable = False )
    course_name = db_.Column(db_.String() , nullable = False )
    course_description = db_.Column(db_.String )
    
    
class enrollments(db_.Model):
    enrollments_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    estudent_id = db_.Column(db_.Integer() , db_.ForeignKey('student.student_id') , nullable = False )
    ecourse_id = db_.Column(db_.Integer() , db_.ForeignKey('course.course_id' ) , nullable = False )
    
    # âœ… Create a relationship to the course table
    course = db_.relationship("course", backref="enrolments")


##########################################
##########################################
##########################################
""" Create the database and tables """
##########################################
##########################################
##########################################
with app_.app_context():
    db_.create_all()










#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Error Handling """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################



#
class FoundError(HTTPException):
    def __init__(self , status_code , message= "" ):
        """
        Constructor for FoundError.
        
        Parameters:
        - status_code (int): HTTP status code to be returned.
        - message (str, optional): Custom error message. Defaults to an empty string.
        """
        
        self.response = make_response( message , status_code )
        
    
    
#
class NotGivenError(HTTPException):
    def __init__(self, status_code , error_code , error_message= "" ):
        message = { "error_code" : error_code , "error_message" : error_message  }
        self.response = make_response( jsonify(message) , status_code )
        
    

#
class NotFoundError(HTTPException):
    def __init__(self , status_code , error_code ,  error_message  ):
        """
        Constructor for NotFoundError.
        
        Parameters:
        - status_code (int): HTTP status code (e.g., 404 for Not Found).
        - error_code (int): A custom error code for internal tracking.
        - error_message (str): A descriptive error message explaining the issue.
        """
        message = { "error_code" : error_code , "error_message" : error_message  }
        self.response = make_response( jsonify(message) , status_code )



#
class BusinessValidationError(HTTPException):
    def __init__(self , status_code , error_code , error_message ):
        
        message = {"error_code" : error_code , "error_message" : error_message }
        self.response = make_response( jsonify(message) , status_code )



#
class AlreadyExist(HTTPException): 
    def __init__( self , status_code , response ):
        
        self.response = make_response(response , status_code )










#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Student API """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################





################################################################################
################################################################################
################################################################################
""" Fields """
################################################################################
################################################################################
################################################################################
student_fields_ ={
    "student_id" : fields.Integer ,
    "first_name" : fields.String ,
    "last_name" : fields.String ,
    "roll_number" : fields.String   
 }


    
    

################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
student_parser = reqparse.RequestParser()
student_parser.add_argument("first_name")
student_parser.add_argument("last_name")
student_parser.add_argument("roll_number")




################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
class Student_Api(Resource):
    
    ############
    #
    #
    @marshal_with(student_fields_)  # decorater gives extra functionality 
    ###################################################################################################################
    #    Get  
    ###################################################################################################################
    def get(self , student_id ):
        # s =  db_.query(student).filter_by(student_id == student_id).first()
        # s = db_.session.query(student).filter(student.student_id == student_id).first()
        s = student.query.filter(student.student_id == student_id).first()
        
        if s is not None :
            return s
        
        raise NotFoundError( status_code=404 )




    ############
    # sending a request and that request has a json body
    # we will have to read that json data that server got and update the database
    @marshal_with(student_fields_)
    ###################################################################################################################
    #    Post
    ###################################################################################################################
    def post( self ):
        
        args = student_parser.parse_args()
        
        first_name = args.get("first_name" , None ) 
        last_name = args.get("last_name" , None )
        roll_number = args.get("roll_number" , None )
        
        if  ( roll_number is None ) or roll_number.strip() == "":
            raise NotGivenError( status_code = 400 , error_code = "STUDENT001" , error_message= "Roll Number required" )
        
        if  ( first_name is None ) or first_name.strip() == "":
            raise NotGivenError( status_code = 400 , error_code = "STUDENT002" , error_message= "First Name required" )
        
        s_exist  = student.query.filter (student.roll_number == roll_number ) . first()
        
        if s_exist : 
            raise FoundError( status_code= 409 )
        
        entry = student(first_name = first_name , last_name = last_name , roll_number = roll_number )
        db_.session.add(entry)
        db_.session.commit()
        return entry , 201 




    ############
    #
    #
    @marshal_with(student_fields_)
    ###################################################################################################################
    #    
    ###################################################################################################################
    def put( self , student_id ):
        
        args = student_parser.parse_args()
        
        first_n = args.get('first_name' , None )
        last_n = args.get('last_name' , None )
        roll_num = args.get('roll_number' , None )
        
        
        if  ( roll_num is None ) or roll_num.strip() == "":
            raise NotGivenError( status_code = 400 , error_code = "STUDENT001" , error_message= "Roll Number required" )
        
        if  ( first_n is None ) or first_n.strip() == "":
            raise NotGivenError( status_code = 400 , error_code = "STUDENT002" , error_message= "First Name required" )
        

        s_exist = student.query.filter_by(roll_number = roll_num).first()
        
        if s_exist :
            raise NotFoundError(statuscode= 404 )
        
        s_exist.first_name = first_n
        s_exist.last_name = last_n 
        s_exist.roll_number = roll_num
        
        db_.session.add(s_exist)
        db_.session.commit()
    
        return s_exist , 200 




    ###################################################################################################################
    #   
    ###################################################################################################################
    def delete(self , student_id ):
        
        ##############3
        s_exist = db_.session.query(student).filter(student.student_id == student_id ).first()
        
        
        if s_exist is None :
            raise NotFoundError(statuscode= 404 )
        
        db_.session.delete(s_exist)
        db_.session.commit()
        return "" , 200
    
    










#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Course API """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################



################################################################################
################################################################################
################################################################################
""" Fields """
################################################################################
################################################################################
################################################################################
course_fields_ = {
    "course_id" : fields.Integer ,
    "course_name" : fields.String ,
    "course_code" : fields.String ,
    "course_description" : fields.String
}




################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
course_parser = reqparse.RequestParser()
course_parser.add_argument("course_name")
course_parser.add_argument("course_code")
course_parser.add_argument("course_description")



################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
class Course_Api(Resource):
    
    
    ############
    #
    #
    @marshal_with(course_fields_)
    ###################################################################################################################
    #    Get  
    ###################################################################################################################
    def get(self , course_id ):
        
        course_ = course.query.filter( course.course_id == course_id).first()
        
        if course_  :
            return course_
        
        else :
            raise FoundError( status_code = 404  ) 
    


    ############
    #
    #
    @marshal_with(course_fields_)
    ###################################################################################################################
    #    Post 
    ###################################################################################################################
    def post( self ):
        
        args_ = course_parser.parse_args()
        
        course_name = args_.get("course_name" , None )
        course_code = args_.get("course_code" , None )
        course_description = args_.get("course_description" , None )
        
        if course_name is None :
            raise NotGivenError( status_code= 404 , error_code='COURSE001' , error_message= 'Course Name is required' )
        
        elif course_code is None :
            raise NotGivenError( status_code= 404 , error_code= 'COURSE002' , error_message= 'Course Code is required')
        
        course_ = course.query.filter(course.course_code == course_code ).first()
        
        
        
        if course_ is None :
            course_=course(course_name = course_name , course_code = course_code , course_description = course_description)
            db_.session.add(course_)
            db_.session.commit()
            
            return course_ , 201
        
        else:
            FoundError(status_code= 400)
            
            
        
    ############
    #
    #
    @marshal_with(course_fields_)
    ###################################################################################################################
    #    Put  
    ###################################################################################################################
    def put(self , course_id ):
        
        course_ = course.query.filter(course.course_id == course_id).first()
        
        args_ = course_parser.parse_args()
        
        course_name = args_.get("course_name" , None )
        course_code = args_.get("course_code" , None )
        course_description = args_.get("course_description" , None )
        
        if course_name is None :
            raise NotGivenError( status_code= 404 , error_code='COURSE001' , error_message= 'Course Name is required' )
        
        elif course_code is None :
            raise NotGivenError( status_code= 404 , error_code= 'COURSE002' , error_message= 'Course Code is required')
        
        else:
            course_.course_code = course_code
            course_.course_name = course_name
            course_.course_description = course_description
            
            db_.session.add(course_)
            db_.session.commit()
            
            return course_ , 200
        
        



    ############
    #
    #
    @marshal_with(course_fields_)
    ###################################################################################################################
    #    Delete
    ###################################################################################################################
    def delete(self , course_id ):
        
        course_ = course.query.filter(course.course_id == course_id ).scalar()
        
        if course_ is None :
            raise FoundError(status_code= 404 )
        
        db_.session.delete(course_)
        db_.session.commit()
        return "" , 200






#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" Enrolment API """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################





################################################################################
################################################################################
################################################################################
""" Fields """
################################################################################
################################################################################
################################################################################
enrolment_fileds_ = {}





################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
enrolment_parser = reqparse.RequestParser()
enrolment_parser.add_argument("course_id")









################################################################################
################################################################################
################################################################################
"""  """
################################################################################
################################################################################
################################################################################
class Enrolment_Api(Resource):
    
    def get( self , student_id ):
        
        student_ = student.query.filter(student.student_id == student_id ).first()
        
        if student_ is None :
            raise NotGivenError( status_code = 400 , error_code="ENROLLMRNT002" , error_message = "Student doesnot exist" )
        
        enrollments_ = enrollments.query.filter(enrollments.estudent_id == student_id).all()
        
        if enrollments :
            enrolls_ = []
            
            for enrollment_ in enrollments_ :
                enrolls_.append({"enrollment_id" : enrollment_.enrollments_id, "student_id" : enrollment_.estudent_id , "course_id" : enrollment_.ecourse_id  })
                
            return enrolls_
        
        else:
            raise FoundError(status_code= 404 )





    ############
    #
    #
    ###################################################################################################################
    #    Post 
    ###################################################################################################################
    def post(self , student_id , course_id):
        student_ = student.query.filter(student.student_id == student_id).first()
        
        if student_ :
            args_ = enrolment_parser.parse_args()
            course_id = args_.get("course_id" , None )
            course_ = course.query.filter(course.course_id == course_id).first()
            
            if course_:
                enroll_ = enrollments(estudent_id = student_id , ecourse_id = course_id )
                
                db_.session.add(enroll_)
                db_.session.commit()
                
            else:
                raise NotGivenError(status_code=400 , error_code= "ENROLLMENT001" , error_message= "Course does not exist")
            
            return [{"enrollment_id" : enroll_.enrollments_id , "student_id" : enroll_.estudent_id , "course_id" : enroll_.ecourse_id}]
            
            
        else :
            raise FoundError( status_code = 404 )
        




    ############
    #
    #
    ###################################################################################################################
    #    Delete
    ###################################################################################################################
    def delete(self , course_id , student_id ):
        
        course_ = course.query.filter(course.course_id == course_id).first()
        
        if course_ is None :
            raise NotGivenError(status_code=400)
        
        student_ = student.query.filter(student.student_id == student_id ).first()
        
        if student_ is None:
            raise NotGivenError(status_code= 400 , error_code="ENROLLMENT002" , error_message="Student does not exist." )
        
        enrollments_ = enrollments.query.filter(enrollments.estudent_id == student_id ).all()
        
        if enrollments_:
            for enroll_ in enrollments_:
                if enroll_.ecourse_id == course_id:
                    db_.session.delete(enroll_)
            db_.session.commit()
            
        else:
            raise FoundError(status_code= 404 )
        
        
        











#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################


#######################################################################################################################
# 
api_.add_resource(Student_Api , "/api/student" , "/api/student/<int:student_id>" )
#######################################################################################################################

#######################################################################################################################
#
api_.add_resource(Course_Api , "/api/course" , "/api/course/<int:course_id>" )
#######################################################################################################################

#######################################################################################################################
#
api_.add_resource(Enrolment_Api , "/api/student/<int:student_id>/course" , "/api/student/<int:student_id>/course/<int:course_id>" , )
#######################################################################################################################









#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
""" """
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
if __name__ == "__main__":
    app_.run(debug=True)