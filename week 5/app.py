########################################################################################
########################################################################################
########################################################################################
"""
In this assignment, you have to create a web application and a database model, using flask and flask-SQLAlchemy.

You have to create a database and must name the database file as "database.sqlite3".
The database model have 3 tabels, for which the schema is given. 
The database URI must be as given below,
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.sqlite3'
"""
########################################################################################
########################################################################################
########################################################################################











########################################################################################
########################################################################################
########################################################################################
"""  """
########################################################################################
########################################################################################
########################################################################################





############################################################
############################################################
############################################################
############################################################
############################################################
"""  """
############################################################
############################################################
############################################################
############################################################
############################################################
from flask import Flask

from flask import render_template 

from flask import redirect

from flask import request





############################################################
############################################################
############################################################
############################################################
############################################################
"""  """
############################################################
############################################################
############################################################
############################################################
############################################################
from flask_sqlalchemy import SQLAlchemy
 
 
 
 
 
 
 
 

###################################################################################################
###################################################################################################
"""  """
###################################################################################################
################################################################################################### 
app_ = Flask(__name__)






###################################################################################################
###################################################################################################
"""  """
###################################################################################################
###################################################################################################
app_.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///database.sqlite3"





###################################################################################################
###################################################################################################
"""  """
###################################################################################################
###################################################################################################
db_ = SQLAlchemy(app_)














################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
""" Models """
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################

# each tabel in my database will refer to the classes here 
class student(db_.Model):
    student_id = db_.Column(db_.Integer(), primary_key = True , autoincrement = True )
    roll_number = db_.Column(db_.String(),unique = True, nullable = False ) ### defalut value of unique is False
    first_name = db_.Column(db_.String(), nullable = False )  ### default value of nullable is False
    last_name = db_.Column(db_.String() )

    # Relationship
    courses_ = db_.relationship("course" , backref = "student" , secondary = "enrollments")
    
    
class course(db_.Model):
    course_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    course_code = db_.Column(db_.String(), unique = True , nullable = False )
    course_name = db_.Column(db_.String() , nullable = False )
    course_description = db_.Column(db_.String )
    
    
class enrollments(db_.Model):
    enrollments_id = db_.Column(db_.Integer() , primary_key = True , autoincrement = True )
    estudent_id = db_.Column(db_.Integer() , db_.ForeignKey('student.student_id') , nullable = False )
    ecourse_id = db_.Column(db_.Integer() , db_.ForeignKey('course.course_id' ) , nullable = False )
    
    # âœ… Create a relationship to the course table
    course = db_.relationship("course", backref="enrolments")




#######################################################
#######################################################
"""  """
#######################################################
#######################################################
with app_.app_context():
    db_.create_all()










###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Home Page """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""
Home Page  
On the home page (URI = "/"), when we open it via the browser, dispaly an index page. The index page must display a tabel
with the list of students currently enrolled.
It should display an appropriate message if no student is enrolled. It should also have a button labled as "Add Student".    
"""

@app_.route("/" , methods = [ "GET" , "POST" ])
def home():
    
    ####################################################################
    ####################################################################
    """ all the records from students tabe """
    ####################################################################
    ####################################################################
    all_students_ = student.query.all() 
    
    return  render_template("home_page_.html" , all_students_ = all_students_)














###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Add Student """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""""
If the user clicks on the "Add Student", flask application should sent a GET request to the endpoint "/student/create",
which should dispaly an HTML form given in figue 2, the HTML form must be the same as given, its id must be "create-form".
"""

@app_.route("/student/create" , methods = [ "GET" , "POST" ])
def add_student():
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET" :
        return render_template("add_student_.html")
        
        
        
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        form_inputed_roll_num_ = request.form.get("roll")
        form_inputed_first_name_ = request.form.get("f_name")
        form_inputed_last_name_ = request.form.get("l_name")
        
        # list of all the selected course 
        selected_course_list_ = request.form.getlist("courses")       
        
        
        ##########################
        """ data validation """
        ##########################
        student_roll_exist = student.query.filter_by( roll_number = form_inputed_roll_num_ ).all()
        
        #
        if student_roll_exist != []:
            return render_template("student_already_exist_.html")
        
        
        else:
            new_student_ = student( roll_number = form_inputed_roll_num_ , first_name = form_inputed_first_name_ , last_name = form_inputed_last_name_ )
            
            db_.session.add(new_student_)
            db_.session.commit()
            
            
            for course_ in selected_course_list_ :
                
                estudent_id_ = new_student_.student_id
                new_enrollment_ = enrollments(estudent_id = estudent_id_ , ecourse_id = course_[-1]   )
                
                db_.session.add(new_enrollment_)
                db_.session.commit()
            
            
        return redirect("/")
            
            
    
    
   







###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" Updating """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks the "Update" button, falsk application should send a GET request to an endpoint 
"/student/<int:student_id>/update" which shouls dispaly an HTML form as shown in figur 5, the HTML form should be the same as given below, its id must be "update-form".
"""

@app_.route("/student/<int:student_id>/update" , methods = [ "GET" , "POST" ])
def update( student_id ):
    
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "GET":
        
        student_updating_ = student.query.filter_by(student_id = student_id ).first()
        
        current_roll = student_updating_.roll_number
        current_f_name = student_updating_.first_name 
        current_l_name = student_updating_.last_name
        
        ######
        current_student_enrolled_courses_ = enrollments.query.filter_by( estudent_id = student_id ).all()
        enroled_course_code_list_ = []
        for course_ in current_student_enrolled_courses_:
            enroled_course_code_list_.append(course_.ecourse_id)
            

        return render_template("update_student_.html" , student_id_ = student_id, current_roll = current_roll , current_f_name = current_f_name , current_l_name = current_l_name , enrolled_course = enroled_course_code_list_ , checked = "checked")
    
    
    
    
    
    
    #######################################################
    #######################################################
    #######################################################
    """  """
    #######################################################
    #######################################################
    #######################################################
    if request.method == "POST" :
        
        
        #
        student_updating_ = student.query.filter_by(student_id = student_id ).first()
        
        form_inputed_roll_num_for_update_ = request.form.get("roll")
        form_inputed_first_name_for_update_ = request.form.get("f_name")
        form_inputed_last_name_for_update_ = request.form.get("l_name")
        
        #
        form_inputed_courses_list_for_update_ = request.form.getlist("courses")
        
        # 
        student_updating_.first_name = form_inputed_first_name_for_update_
        student_updating_.last_name = form_inputed_last_name_for_update_
        
        
        
        #
        student_updating_.courses=[]
        
        previous_enrolled_courses_ = enrollments.query.filter_by(estudent_id = student_id ).all()
        
        for courses_enrolled in previous_enrolled_courses_:
            db_.session.delete(courses_enrolled)
            db_.session.commit()
        
        db_.session.commit()
        
        
        #
        for course_ in form_inputed_courses_list_for_update_ :
                
            estudent_id_ = student_updating_.student_id
            updated_enrollment_ = enrollments(estudent_id = estudent_id_ , ecourse_id = course_[-1]   )
                
            db_.session.add(updated_enrollment_)
            db_.session.commit()
        
        db_.session.commit()
        
        
        return redirect("/")
        
        
        
        
        
        
        
    
    












###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""  """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks "Delelte" button, falsk application should send a GET request to an endpoint 
"/student/<int:student_id>/delete", which should delete the student and all the corresponding enrollments from the database
redirect to the home page (URI = "/").
"""

@app_.route("/student/<int:student_id>/delete")
def delete( student_id ):
    
    
    student_in_focus = student.query.filter_by(student_id = student_id).all()
    
    student_in_focus_courses = enrollments.query.filter_by( estudent_id = student_id ).all()
    
    
    for courses_enrolled in student_in_focus_courses:
        db_.session.delete(courses_enrolled)
        db_.session.commit()
        
    db_.session.commit()
    
    for student_ in student_in_focus:
        db_.session.delete(student_)
        db_.session.commit()
        
        
        
    #
    return redirect("/")
    
    
    













###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
"""  """
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
""" 
If the user clicks on the roll number of any row in the tabel in the home page of the flask applicaion, the application send a GET request to an endpoint "/student/<int:student_id>, which should show all the information (student details and enrollment details) in an HTML page. The HTML page should also have a button labled as "Go Back" to navigate back to the home page (URI = '/'). There must be 2 HTML tables in this page, one for showing the person details and the other for showing the enrollment details. 

The HTML for showing the personal details should be the same as given, its id must be "personal-details".
The HTML for displaying the enrollment details should be same as given, its id must be "entoll-tabel".
"""

@app_.route("/student/<int:student_id>")
def info(student_id):
    
    student_in_focus = student.query.filter_by(student_id = student_id).first()
    
    student_in_focus_courses = enrollments.query.filter_by( estudent_id = student_id ).all()
    
    
    
    # 
    return render_template("student_info_.html" , studet_courses_ = student_in_focus_courses , roll_ = student_in_focus.roll_number , f_name = student_in_focus.first_name , l_name = student_in_focus.last_name )






 


#########################################################
#########################################################
#########################################################
#########################################################
""" """
#########################################################
#########################################################
#########################################################
#########################################################
if __name__ == "__main__":
    app_.run(debug=True)